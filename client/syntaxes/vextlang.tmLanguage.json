{
    "scopeName": "source.vex",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#literals"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#attributes"
        },
        {
            "include": "#generics"
        },
        {
            "include": "#pattern-matching"
        },
        {
            "include": "#module-paths"
        },
        {
            "include": "#regex"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.vex",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.vex",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.vex"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.vex",
                    "match": "\\b(fn|let|const|if|else|for|while|break|continue|return|match|where|async|await)\\b"
                },
                {
                    "name": "keyword.other.vex",
                    "match": "\\b(struct|enum|import|package|trait|impl)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type.primitive.vex",
                    "match": "\\b(int|float|bool|string|char)\\b"
                },
                {
                    "name": "storage.type.generic.vex",
                    "match": "\\b(Option|Result|Vec)\\b"
                },
                {
                    "name": "entity.name.type.vex",
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "name": "string.quoted.double.vex",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.vex",
                            "match": "\\\\[abfnrtv\\\\\"']"
                        },
                        {
                            "name": "constant.character.escape.hex.vex",
                            "match": "\\\\x[0-9a-fA-F]{2}"
                        },
                        {
                            "name": "constant.character.escape.unicode.vex",
                            "match": "\\\\u[0-9a-fA-F]{4}"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.vex",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.vex",
                            "match": "\\\\[abfnrtv\\\\\"']"
                        }
                    ]
                },
                {
                    "name": "constant.numeric.integer.vex",
                    "match": "\\b\\d+\\b"
                },
                {
                    "name": "constant.numeric.float.vex",
                    "match": "\\b\\d+\\.\\d+\\b"
                },
                {
                    "name": "constant.language.boolean.vex",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.vex",
                    "match": "\\+|-|\\*|/|%"
                },
                {
                    "name": "keyword.operator.comparison.vex",
                    "match": "==|!=|<|<=|>|>="
                },
                {
                    "name": "keyword.operator.logical.vex",
                    "match": "&&|\\|\\||!"
                },
                {
                    "name": "keyword.operator.assignment.vex",
                    "match": "=|\\+=|-=|\\*=|/=|%="
                },
                {
                    "name": "keyword.operator.vex",
                    "match": "->|::|:|;|,|\\.|\\?"
                }
            ]
        },
        "attributes": {
            "patterns": [
                {
                    "name": "meta.attribute.vex",
                    "begin": "@",
                    "end": "\\s",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.attribute.vex"
                        }
                    },
                    "patterns": [
                        {
                            "name": "entity.name.attribute.vex",
                            "match": "[a-zA-Z_][a-zA-Z0-9_]*"
                        }
                    ]
                }
            ]
        },
        "generics": {
            "patterns": [
                {
                    "name": "meta.generic.vex",
                    "begin": "<",
                    "end": ">",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.generic.begin.vex"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.generic.end.vex"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#types"
                        },
                        {
                            "name": "punctuation.separator.vex",
                            "match": ","
                        }
                    ]
                }
            ]
        },
        "pattern-matching": {
            "patterns": [
                {
                    "name": "keyword.control.match.vex",
                    "match": "\\bmatch\\b"
                },
                {
                    "name": "keyword.control.guard.vex",
                    "match": "\\bif\\b(?=\\s*=>)"
                }
            ]
        },
        "module-paths": {
            "patterns": [
                {
                    "name": "meta.path.vex",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(::[a-zA-Z_][a-zA-Z0-9_]*)*\\b"
                }
            ]
        },
        "regex": {
            "patterns": [
                {
                    "name": "string.regex.vex",
                    "begin": "/",
                    "end": "/",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.vex"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.vex"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape.regex.vex",
                            "match": "\\\\[abfnrtv\\\\/\\[\\]\\(\\)\\{\\}\\|\\+\\*\\?\\.\\^\\$]"
                        }
                    ]
                }
            ]
        }
    }
}